// Screensize variables
var width = window.innerWidth,
	height = window.innerHeight,
	midWidth = width / 2,
	midHeight = height / 2,
	canvas = document.getElementById('background'),
	ctx = canvas.getContext("2d"),
    IPS = 30,
    lastLoop = new Date,
    fps;

canvas.width=width;
canvas.height=height;

// Global game object
var Game = Game || {
    
    _this: this,
    
    Assets : {
        
        load: function(sources, callback){
            var images = {},
                loadedImages = 0,
                numImages = 0;
                
            for(var src in sources){
                numImages++;
            }

            for(var src in sources) {
                images[src] = new Image();
                images[src].onload = function() {
                    if(++loadedImages >= numImages){
                        callback(images);
                    }
                };
                images[src].src = sources[src];
            }
        },
        
        preload: function(callback){
            var loadedImages = 0,
                numImages = 0;
                
            for(var src in this.Sources){
                numImages++;
            }
            
            for (var src in this.Sources) {
                this.Gallery[src] = new Image();
                this.Gallery[src].onload = function() {
                    if(++loadedImages >= numImages){
                        console.log("Loading " + loadedImages + " images");
                        callback();
                    }  
                };
                this.Gallery[src].src = this.Sources[src];
            }
            
        },
        
        Sources: {
            cursorTile : "./assets/img/map/cursor_hover.png",
            normalTile : "./assets/img/map/normal_tile.png",
            rightStair : "./assets/img/map/stair_1.png",
            leftStair : "./assets/img/map/stair_2.png",
            cornerStair : "./assets/img/map/stair_3.png",
            rightWall : "./assets/img/map/right_wall.png",
            leftWall : "./assets/img/map/left_wall.png",
            cornerWall : "./assets/img/map/corner_wall.png",
            rightDoor : "./assets/img/map/right_door.png",
            leftDoor : "./assets/img/map/left_door.png"
        },
        
        Gallery: {}
    },
    
    Canvas : {
        
        draw: function(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight){

            ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
            
        },
        
        update: function() {
            width = window.innerWidth,
        	height = window.innerHeight,
        	midWidth = width / 2,
        	midHeight = height / 2,
        	canvas.width=width,
        	canvas.height=height;
        	
        	var thisLoop = new Date;
			fps = Math.round(1000 / (thisLoop - lastLoop));
			lastLoop = thisLoop;
        }
    },
    
    Debug: {
       
       map: function(){
            var coordX = document.getElementById("coordX").value,
                coordY = document.getElementById("coordY").value,
                _X = "";
            
            if(coordX < 1){
                coordX = 1;
            }
            
            if(coordY < 1){
                coordY = 1;
            }

            document.getElementById("area").value = coordY * coordX;
            Game.Map.models.sample= [];
            
            for(var y=0; y < coordY; y++){
                for(var x=0; x < coordX; x++){
                    _X += "0"
                }
                Game.Map.models.sample[y] = _X;
                _X = "";
            }
       }
        
    },
    
    Map : {
        
        models: {
        	a: ["11L00",
				"11L00",
				"RRC00",
				"00000",
				"00000"],
        	b: ["111111",
                "11XX11",
                "RRXXRR",
                "00XX00",
                "000000"],
        	sample: ["XXXXXXX",
        	         "X222222",
        	         "XRRRRRX",
        	         "X11111X",
        	         "XRRRRRX",
        	         "X00000X",
        	         "X00000X",
        	         "XXXXXXX"]
        },
        
        draw: function(map) {
			var tileH = 32,
				tileW = 64,
				mapX = 500,
				mapY = 200,
				count = 0,
				_x,
				_y,
				tile,
				z;
			
			for (var y = 0; y < map.length; y++) {
				for (var x = 0; x < map[y].length; x++) {
					
					tile = map[y][x];
					
					if(map[y][x] == "R" || map[y][x] == "L" || map[y][x] == "C"){
					    z = Math.round(Number(map[y][x]));
					} else {
					    z = Math.round(Number(map[y][x]));
					}
					
					if(isNaN(z)){
						z = 0;
					}
					_x = (x - y) * tileH + mapX;
					_y = (-z * tileH) + (y + x) * tileH / 2 + mapY;

					if(tile != "X" && tile != "R" && tile != "L" && tile != "C"){
						ctx.drawImage(Game.Assets.Gallery.normalTile, _x, _y);
					}

					if(tile == "R"){
						_y -= tileH;
						ctx.drawImage(Game.Assets.Gallery.rightStair, _x, _y);
					}

					if(tile == "L"){
						_y -= tileH;
						ctx.drawImage(Game.Assets.Gallery.leftStair, _x, _y);
					}

					if(tile == "C"){
						_y -= tileH;
						ctx.drawImage(Game.Assets.Gallery.cornerStair, _x, _y);
					}
					
					count++;
					
					console.log("Tile nÂ°" + count + ": ISO (x: " + x + ", y: " + y + ", z: " + z + ") - PX (" + _x + ";" + _y + ")");
				}
			}
		}
    }
};


window.onload = function(){
    
    Game.Assets.preload(function(){
        
        // Game loop
        /*
        setInterval(function() {
        	Game.Canvas.update();
            //Game.Debug.map();
        	Game.Map.draw(Game.Map.models.b);
        }, 1000/IPS);
        */
        Game.Map.draw(Game.Map.models.sample);
    });
    
};

/// FUTUR USE //
/*

var app = angular.module('HabboJS', []);

app.controller('ParentCtrl ', function($scope) {});

app.controller('ChildCtrl', function($scope, $controller) {
  $controller('ParentCtrl', {$scope: $scope});
});

*/